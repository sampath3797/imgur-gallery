{"version":3,"file":"main.js","mappings":"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","sources":["./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/image.service.ts","./src/environments/environment.ts","./src/main.ts","./src/polyfills.ts"],"sourcesContent":["import { Component, VERSION } from '@angular/core';\nimport { of, Subscription } from 'rxjs';\nimport { Observable } from 'rxjs/internal/Observable';\nimport { ImageService } from './image.service';\nimport { Image, imageData, ImageDetails } from './image';\nimport { FormControl } from '@angular/forms';\nimport { HttpErrorResponse } from '@angular/common/http';\n\n@Component({\n  selector: 'my-app',\n  templateUrl: './app.component.html',\n  styleUrls: [ './app.component.css' ],\n})\nexport class AppComponent  {\n  title = 'Angular-Imgur-Gallery';\n  sectionCtrl = new FormControl('hot');\n  sortCtrl = new FormControl('viral');\n  wndowCtrl = new FormControl('day');\n\n  Images$: Observable<Image>;\n  ImagesSubscription: Subscription;\n\n  imageData: imageData[] = [];\n  images: ImageDetails[] = [];\n  section: 'hot' | 'top' | 'user';\n  sort: 'viral' | 'top' | 'time';\n  wndow: 'day' | 'week' | 'month' | 'year' | 'all';\n  isLoading = false;\n\n  constructor(private _imgService: ImageService){\n\n  }\n\n  ngOnInit()\n  {\n    this.fetchImages();\n  }\n\n  // invokes fetchImages \n  // when Load Images button clicked\n  reload()\n  {\n    this.fetchImages();\n  }\n\n  // method to fetch images from api end point\n  fetchImages()\n  {\n    // to empty the imageData array with existing data if any  before loading with fresh data.\n    this.imageData.splice(0,this.imageData.length);\n    // isLoading boolean setting for showing progressbar and also disabling load images button.\n    this.isLoading = true;\n    this.ImagesSubscription  = this._imgService.getImages(this.sectionCtrl.value,this.sortCtrl.value, this.wndowCtrl.value)\n                              .subscribe(res => \n                                          {\n                                            this.isLoading = false;\n                                            if(res.data && res.data?.length > 0)\n                                            {\n                                              this.images = res.data;\n                                              this.images  // filtering elements don't have images\n                                                        .filter(x => x.images_count > 0) \n                                                        .map(y => \n                                                                {\n                                                                  y.images   // filtering elements that don't have video and only retain oly images of jpeg / png type\n                                                                          .filter(z => z.type === 'image/jpeg' || z.type === 'image/png')\n                                                                          .map(p => {\n                                                                            // modifying link url to load medium thumbnail images\n                                                                            p.link = this.thumbnail(p.link); \n                                                                            // finally pushing elements to imageData Array for iterating in html template\n                                                                            this.imageData.push(p)  \n                                                                          });\n                                                                }                               \n                                                            );\n                                            }\n                                          },\n                                          (err: HttpErrorResponse) => {\n                                                  this.isLoading = false; \n                                                  // to display the errors returned from api end point if any are there\n                                                  alert(JSON.stringify(err.error?.data?.error));\n                                                  \n                                                  }\n                                          );\n  }\n\n  // as per apidocs.imgr.com documentation modifiying url \n  // by appending letter 'm' to get thumbnails of medium size\n  thumbnail(lnk: string)\n  {\n    if(lnk.endsWith('.jpg'))\n    {\n      const lnkArr = lnk.split('.jpg');\n      return lnkArr[0]+'m.jpg';\n    }\n    else if(lnk.endsWith('.png'))\n    {\n      const lnkArr = lnk.split('.png');\n      return lnkArr[0]+'m.png';\n    }\n    \n  }\n\n  // for improving performance to render only those elements with id changed\n  trackByFn(index: number, el:imageData)\n  {\n    return el.id;\n  }\n\n  // unsubscribing the subscription before component destroy\n  // to avoid memory leaks\n  ngOnDestroy()\n  {\n    this.ImagesSubscription.unsubscribe();\n  }\n\n}\n","<div style=\"height: 50px;background-color: rgb(15, 156, 238);color:white; vertical-align: middle;text-align: center;\"><h1>IMGUR GALLERY</h1></div>\n<div class=\"searchCriteria\">\n    <mat-form-field appearance=\"outline\">\n        <mat-label>Select Section</mat-label>\n        <mat-select  [formControl]=\"sectionCtrl\">\n            <mat-option value=\"hot\">Hot</mat-option>\n            <mat-option value=\"top\">Top</mat-option>\n            <mat-option value=\"user\">User</mat-option>\n        </mat-select>\n        </mat-form-field>\n        \n<mat-form-field appearance=\"outline\"  style=\"margin-left: 5px;\">\n    <mat-label>Select Sort</mat-label>\n<mat-select  [formControl]=\"sortCtrl\">\n    <mat-option value=\"viral\">Viral</mat-option>\n    <mat-option value=\"top\">Top</mat-option>\n    <mat-option value=\"time\">Time</mat-option>\n</mat-select>\n</mat-form-field>\n\n<mat-form-field appearance=\"outline\" style=\"margin-left: 5px;\">\n    <mat-label>Select Window</mat-label>\n<mat-select  [formControl]=\"wndowCtrl\" >\n    <mat-option value=\"day\">Day</mat-option>\n    <mat-option value=\"week\">Week</mat-option>\n    <mat-option value=\"month\">Month</mat-option>\n    <mat-option value=\"year\">Year</mat-option>\n    <mat-option value=\"all\">All</mat-option>\n</mat-select>\n</mat-form-field>\n\n<button style=\"margin-left: 5px;\" [disabled]=\"isLoading\" mat-raised-button color=\"primary\" (click)=\"reload()\">Load Images</button>\n</div>\n\n <div *ngIf=\"isLoading\">Loading Images....\n    <mat-progress-bar mode=\"indeterminate\"></mat-progress-bar>\n </div>\n <div class=\"imgContainer\">\n <mat-grid-list *ngIf=\"imageData.length > 0\" cols=\"4\" rowHeight=\"2:1\" [gutterSize]=\"'10px'\">\n   <mat-grid-tile *ngFor=\"let img of imageData;trackBy:trackByFn \"  >\n    <div>\n        <img src={{img.link}} alt={{img.description}}/>\n        <mat-grid-tile-footer>{{img.description}}</mat-grid-tile-footer>\n    </div>\n        \n    \n    </mat-grid-tile> \n\n</mat-grid-list>\n</div>\n\n","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { HttpClientModule } from '@angular/common/http';\nimport { AppComponent } from './app.component';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { ImageService } from './image.service';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatInputModule} from '@angular/material/input';\nimport {MatProgressBarModule} from '@angular/material/progress-bar';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n\n@NgModule({\n  imports: [BrowserModule,BrowserAnimationsModule, MatProgressBarModule, MatInputModule, FormsModule,MatFormFieldModule, ReactiveFormsModule, MatGridListModule, MatSelectModule,MatButtonModule, HttpClientModule],\n  declarations: [AppComponent],\n  bootstrap: [AppComponent],\n  providers:[ImageService]\n})\nexport class AppModule {}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from  '@angular/common/http';\nimport { catchError, Observable, of } from 'rxjs';\nimport {Image} from './image';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ImageService {\n\n  constructor(private _httpclient: HttpClient) { }\n  \n  public headers = new HttpHeaders({\n    'Content-Type': 'application/json',\n    'Authorization': `Client-ID ${environment.CLIENT_ID}`\n  });\n\n  getImages(section:string, sort: string, wndow: string):Observable<Image>\n  {\n    return this._httpclient.get<Image>(`${environment.IMGUR_API_ENDPOINT}/${section}/${sort}/${wndow}.json`, {headers: this.headers});\n  }\n\n  handleError(err)\n  {\n\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n\n  IMGUR_API_ENDPOINT : 'https://api.imgur.com/3/gallery',\n  CLIENT_ID : '3c9187c5272944b'\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/plugins/zone-error';  // Included with Angular CLI.\n","import './polyfills';\n\nimport { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\n\nplatformBrowserDynamic().bootstrapModule(AppModule).then(ref => {\n  // Ensure Angular destroys itself on hot reloads.\n  if (window['ngRef']) {\n    window['ngRef'].destroy();\n  }\n  window['ngRef'] = ref;\n\n  // Otherwise, log the boot error\n}).catch(err => console.error(err));","/**\n * This file includes polyfills needed by Angular and is loaded before the app.\n * You can add your own extra polyfills to this file.\n *\n * This file is divided into 2 sections:\n *   1. Browser polyfills. These are applied before loading ZoneJS and are sorted by browsers.\n *   2. Application imports. Files imported after ZoneJS that should be loaded before your main\n *      file.\n *\n * The current setup is for so-called \"evergreen\" browsers; the last versions of browsers that\n * automatically update themselves. This includes Safari >= 10, Chrome >= 55 (including Opera),\n * Edge >= 13 on the desktop, and iOS 10 and Chrome on mobile.\n *\n * Learn more in https://angular.io/docs/ts/latest/guide/browser-support.html\n */\n\n/***************************************************************************************************\n * BROWSER POLYFILLS\n */\n\n/** IE9, IE10 and IE11 requires all of the following polyfills. **/\n// import 'core-js/es6/symbol';\n// import 'core-js/es6/object';\n// import 'core-js/es6/function';\n// import 'core-js/es6/parse-int';\n// import 'core-js/es6/parse-float';\n// import 'core-js/es6/number';\n// import 'core-js/es6/math';\n// import 'core-js/es6/string';\n// import 'core-js/es6/date';\n// import 'core-js/es6/array';\n// import 'core-js/es6/regexp';\n// import 'core-js/es6/map';\n// import 'core-js/es6/set';\n\n/** IE10 and IE11 requires the following for NgClass support on SVG elements */\n// import 'classlist.js';  // Run `npm install --save classlist.js`.\n\n/** IE10 and IE11 requires the following to support `@angular/animation`. */\n// import 'web-animations-js';  // Run `npm install --save web-animations-js`.\n\n\n/** Evergreen browsers require these. **/\n// import 'core-js/es6/reflect';\n// import 'core-js/es7/reflect';\n\n\n/**\n * Web Animations `@angular/platform-browser/animations`\n * Only required if AnimationBuilder is used within the application and using IE/Edge or Safari.\n * Standard animation support in Angular DOES NOT require any polyfills (as of Angular 6.0).\n */\n// import 'web-animations-js';  // Run `npm install --save web-animations-js`.\n\n\n\n/***************************************************************************************************\n * Zone JS is required by Angular itself.\n */\nimport 'zone.js/dist/zone';  // Included with Angular CLI.\n\n\n/***************************************************************************************************\n * APPLICATION IMPORTS\n */\n\n/**\n * Date, currency, decimal and percent pipes.\n * Needed for: All but Chrome, Firefox, Edge, IE11 and Safari 10\n */\n// import 'intl';  // Run `npm install --save intl`."],"names":[],"sourceRoot":"webpack:///"}